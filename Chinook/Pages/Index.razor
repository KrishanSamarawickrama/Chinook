@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Microsoft.EntityFrameworkCore

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

@if (Artists == null)
{
    <Loading/>
}
else
{
    <div class="search-container">
        <input @bind="ArtistSearchKey" type="text" placeholder="Search artist.." name="search">
        <button type="submit" @onclick="FilterArtists">
            <i class="bi bi-search"></i>
        </button>
    </div>
    <br/>
    <hr/>
    <br/>
    <table class="table table-striped table-hover table-sm">
        <thead>
        <tr>
            <th>Name</th>
            <th>Number of albums</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var artist in Artists)
        {
            <tr>
                <td>
                    <a href="Artist/@artist.ArtistId">@artist.Name</a>
                </td>
                <td>@artist.Albums.Count()</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<Artist> Artists;

    [Inject]
    IBaseRepository<Artist> ArtistsRepository { get; set; }

    [Inject]
    IBaseRepository<Album> AlbumRepository { get; set; }

    private string ArtistSearchKey { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        Artists = GetArtists();
    }

    private List<Artist> GetArtists()
    {
        return ArtistsRepository.Get().ToList();
    }

    public List<Album> GetAlbumsForArtist(int artistId)
    {
        return AlbumRepository.Get(a => a.ArtistId == artistId).ToList();
    }

    private void FilterArtists()
    {
        Artists = ArtistsRepository.Get(x => x.Name.ToLower().Contains(ArtistSearchKey.ToLower())).ToList();
        StateHasChanged();
    }

}