@page "/playlist/{PlaylistId:long}"
@attribute [Authorize]
@inject NavigationManager NavigationManager

@using Chinook.Models
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

<h1>Playlist <strong>@Playlist.Name</strong></h1>

<div class="row">
    <div class="col">Actions : </div> 
    <button class="col-2" title="Rename playlist">
        <i class="bi bi-pencil"></i>
    </button>
    <button class="col-2" title="Remove playlist" @onclick="RemovePlayList">
        <i class="bi bi-x"></i>
    </button>
</div>

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Playlist == null)
{
    <Loading/>
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
        <tr>
            <th>Track</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var track in Playlist.Tracks)
        {
            <tr>
                <td>@track.ArtistName - @track.AlbumTitle - @track.TrackName</td>
                <td>
                    <div class="d-flex">
                        @if (Playlist.Name != "Favorite")
                        {
                            @if (track.IsFavorite)
                            {
                                <a href="#" class="m-1" title="Unark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault>
                                    <i class="bi bi-star-fill"></i>
                                </a>
                            }
                            else
                            {
                                <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault>
                                    <i class="bi bi-star"></i>
                                </a>
                            }
                        }
                        <a href="#" class="m-1" title="Remove from this playlist" @onclick="@(() => RemoveTrack(track.TrackId))" @onclick:preventDefault>
                            <i class="bi bi-trash"></i>
                        </a>
                    </div>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {

    [Parameter]
    public long PlaylistId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Inject]
    IPlaylistRepository PlaylistRepository { get; set; }
    
    [Inject]
    IUserPlaylistRepository UserPlayListRepository { get; set; }

    private Chinook.ClientModels.Playlist Playlist;
    private string CurrentUserId;
    private string InfoMessage;

    protected override async Task OnInitializedAsync()
    {
        CurrentUserId = await GetUserId();

        await InvokeAsync(StateHasChanged);

        Playlist = PlaylistRepository.Get(p => p.PlaylistId == PlaylistId, null, "Tracks.Album.Artist")
            .ToList()
            .Select(p => new ClientModels.Playlist()
            {
                Name = p.Name,
                Tracks = p.Tracks.Select(t => new ClientModels.PlaylistTrack()
                {
                    AlbumTitle = t.Album?.Title,
                    ArtistName = t.Album?.Artist?.Name,
                    TrackId = t.TrackId,
                    TrackName = t.Name,
                    IsFavorite = t.Playlists?.Any(p => p.UserPlaylists?.Any(up => up.UserId == CurrentUserId && up?.Playlist?.Name == "Favorites") ?? false) ?? false
                }).ToList()
            }).FirstOrDefault();
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private void FavoriteTrack(long trackId)
    {
        var track = Playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistRepository.AddOrRemoveFavorite(CurrentUserId, trackId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
    }

    private void UnfavoriteTrack(long trackId)
    {
        var track = Playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistRepository.AddOrRemoveFavorite(CurrentUserId, trackId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
    }

    private void RemoveTrack(long trackId)
    {
        CloseInfoMessage();
        var track = Playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistRepository.AddOrRemoveTrack(CurrentUserId, trackId, PlaylistId, null);
        InfoMessage = $"Track {track.TrackName} removed from playlist {Playlist.Name}.";
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }
    
    private void RemovePlayList()
    {
        UserPlayListRepository.Delete(CurrentUserId, PlaylistId);
        StateHasChanged();
        NavigationManager.NavigateTo("/");
    }

}